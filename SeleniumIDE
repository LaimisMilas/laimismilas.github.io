Instaliacijos instrukcijos https://www.seleniumhq.org/selenium-ide/
Instrukcijos kaip dirbti su CL.
https://www.seleniumhq.org/selenium-ide/docs/en/introduction/command-line-runner/

Apie komandas
Selenium IDE turi komandą "run" paleisti kitus testus. Taip galima skaldyti testus į fragmentus ir pernauodoti. 
Selenium IDE turi komandą "execute script" paleisti JS.
Skripto struktura: kintamieji, funkcija, funkcijos iškvietimas. 

Išorinis API
Panel "Create Event" proceduros menu yra siunčiamas laiškas interpreteriui prisijungti prie sistemos ir patvirtinti kvietimą. Kan automatizuoti patvirtinimą,
panaudotas  API https://temp-mail.org/ sprendimas.
API https://temp-mail.org/ leidžia susikurti laikiną el.pašto dėžutę. Taip pat turi API kuris hostinamas pas RapidAPI.
Norint pradėti naudotis reikia Subscribinti, galima pasirinkti minimalų planą, ten per dieną leidžia sukurti 100 el.pašto dėžučių. 
https://rapidapi.com/Privatix/api/temp-mail
RapidAPI yra accounts user: laimonas@interactio.io 
Dabar raktas naudojamas '33f833735dmsh8703c253eb80266p120ecajsndfc9a16e3623
Užklausa skirta domenams gauti, API duoda naudoti kelis domenus, Jie gali keisti todėl reikia parsitraukti. Taupant resursus galima išsisaugoti viena domeną ir dirbti su vienu, sutaupytume užklausų skaičių.
Užklausa atrodo kaip:
function getDomainList() {   var data = null; var result = 3;     var apiKey = "33f833735dmsh8703c253eb80266p120ecajsndfc9a16e3623";     var apiUrl ="https://privatix-temp-mail-v1.p.rapidapi.com/request/domains/"; var apiMeth ="GET";       var xhr = new XMLHttpRequest(); xhr.withCredentials = true;   xhr.open(apiMeth, apiUrl ,false); xhr.setRequestHeader("x-rapidapi-host", "privatix-temp-mail-v1.p.rapidapi.com"); xhr.setRequestHeader("x-rapidapi-key", apiKey);   xhr.send(data);      if (xhr.readyState === 4){   JSON.parse(xhr.responseText);   result = JSON.parse(xhr.responseText)[0];   return result;   } else {   return result; } }  return getDomainList();

Užklausa leidžia gauti laiškus išsiustus adresatui. Reikia perduoti adresą jis turi būti užkoduotas md5 koduote ir išsaugotas kaip kintamasis "md5Encripted".
Užklausa laiškams gauti ir regToken parsinti atrodo taip:
const emailMd5 = ${md5Encripted}; const apiKey = '33f833735dmsh8703c253eb80266p120ecajsndfc9a16e3623'; function getEmails() { const data = null; const result = null; const apiUrl = `https://privatix-temp-mail-v1.p.rapidapi.com/request/mail/id/${emailMd5}/`; const apiMeth = 'GET'; const xhr = new XMLHttpRequest(); xhr.withCredentials = true; xhr.open(apiMeth, apiUrl, false); xhr.setRequestHeader('x-rapidapi-host', 'privatix-temp-mail-v1.p.rapidapi.com'); xhr.setRequestHeader('x-rapidapi-key', apiKey); xhr.send(data); if (xhr.readyState === 4) { var rJSON = JSON.parse(xhr.responseText); return rJSON[0].mail_text.split("<")[1].split(">")[0]; } return result; } return getEmails();

API naudojamas md5 užkodavimui, temp-email.org reikalauja kan el.paštas būtų užkoduotas. 
https://md5decrypt.net/en/Api/api.php
https://md5decrypt.net/en/Api/ reiki suvesti paštą, Jie atsius laišką su raktu kurį veliau reikės perdavinėti užklausose.
Dabar raktas ef98eb935a9620b9 el.paštas laimonas@interactio.io
Užklausa leidžia gauti užkoduotą tekstą reikia perduoti kintamajį "emailAddress".
Užklausa atrodo taip:
var encodeText = ${emailAddress}; var email ="laimonas@interactio.io"; var code = "ef98eb935a9620b9"; function getMd5Code() { var data = null; var result = 3; var apiUrl ="https://md5decrypt.net/en/Api/api.php"; var apiMeth ="GET"; var xhr = new XMLHttpRequest(); xhr.withCredentials = true; xhr.open(apiMeth, apiUrl + "?word="+ encodeText +"&hash_type=md5&email="+ email +"&code="+ code ,false); xhr.send(data); if (xhr.readyState === 4){ result = xhr.responseText; return result; } else { return result; } } return getMd5Code();

Įrankis xpath kūrimui. Padeda kai reikia surasti target elementą. 
http://xpather.com

Links: https://www.mocky.io/
https://beeceptor.com/
https://konghq.com/ 
http://mockbin.org/ leidzia susikurti, Nemokamas, nera managerio. 
Git Clone https://github.com/Kong/mockbin.git
npm install
npm start
open url http://localhost:8080/bin/create
https://httpstat.us/ leidžia mokinti status kodus.
httpstat.us/200?sleep=5000  leidžia mokinti status kodą ir sleep serverio pusėje. Sleepas iki 5sec.
https://signup.heroku.com
Pasileidau Interactio/mockhttp aplikacija. Leidžia mokinti requestus, prasitestavau statusCode, timeout'us.
Dar norėčiau pasitestinti networko trigdžius, kai dings vel atsistato. Nežinau kaip sumokinti programiškai tokius dalykus.
https://temp-mail.org leidžia kurti laikinus elpaštus.  Dar turi API https://temp-mail.org/api/
https://www.tempmailaddress.com leidžia kurti laikinus elpaštus.
https://tempail.com/en/  leidžia kurti laikinus elpaštus.
https://www.guerrillamail.com   leidžia kurti laikinus elpaštus.
https://www.emailondeck.com/eod.php   leidžia kurti laikinus elpaštus.
https://mailsac.com/docs/api/#introduction
Radau Selenium IDE triukus, leidzia prasiplėsti esamą ide.   https://sites.google.com/site/seleniumworks/selenium-ide-tricks

Appium home: http://appium.io Selenium WebDrive wrappers. Appium yra web serveris turintis REST API.
Pagrindine užduotis testuoti Mobilias aplikacijas su tikrais įrenginiais ar simuliatoriais.
Appium turi ir Appium Desktop GUI versija, yra viską ko reikia kad paleisti serverį, sukonfiguruoti, inspektinti.
Appium serveris palaiko bibliotekas appium-clients siulo naudoti vietoje įprasto WebDrive kliento. Appium klientai turi implementave Mobile JSON Wire Protocol.
Testuoti MacOS hibridines aplikacijas.
Darbui su MacOS aplikacijomis yra specialiai sukurtas serveris AppiumForMac(Appium server). Tai Appium web serverio analogas. Serveriu yra sukurtas
specialus klientas appium-mac-driver. http://appium.io/docs/en/drivers/mac/index.html
Galima tiesiog parsisiusti jau subuildinta apps'a. AppiumForMac.zip ir instalioti /Applications.
Isitikinti ar AppiumForMac serveris yra /Applications dirktorijoje. Kai nėra reikia įdiegti.
Sukurti klieną, kuris priklauso nuo biblioteka "appium-mac-driver". Jei biblioteks nebus sistema neveiks ir išduos pranešimą.
Sukurti capabilities(caps) : let defaultCaps = {
platformName: "Mac",
platformVersion: "10.14",
deviceName: "Mac mini",
automationName: "XCUITest",
app:"/Users/laimis/Desktop/Dev.app"
};
Sukurti MacDrive objecta. MacDriver = require("appium-mac-driver").MacDriver;
Paleidus susikuria sesija tarp "Klient app", "AppiumForMAC" ir "Interactio Broatcaster Dev". Galima vygdyti testavimo scenariju.
Norint debuginti AppiumForMac. Reikia parsisiusti source https://github.com/appium/appium-for-mac pasileisti su XCodel.
AppiumForMac, turi JSONWiredProtocol realizacija, bet ne pilną,ne visi endopointai yra realizuotos, tai matosi source kode. Kada nėra noro kurti klientą, galima tiesiog rankiniu būdu paleisti 
AppiumForMac. JMeter pagalba galima kviesti HTTPRequest ir perdavinėti paramentrus, taip bus vygdomas JSONWiredProtocol.
Dirbant su sistema susiduriau su problema kad nevisada galiu gauti page source, tai susija su privileges, įkėlus applikaciją į Application direktorija page source galima gauti.
Bet Interactio Broadcaster vistiek neleidzia pasiekti page source. 
